type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/FlightNotFoundException.java
  visible: true
  text: |-
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    class FlightNotFoundException extends RuntimeException {

        public FlightNotFoundException(String cause) {
            super(cause);
        }
    }
  learner_created: true
- name: src/cinema/FlightInfo.java
  visible: true
  text: |-
    package cinema;

    public class FlightInfo {

        private int id;
        private String from;
        private String to;
        private String gate;

        // constructor
        public FlightInfo(int id, String from, String to, String gate) {
            this.id = id;
            this.from =from;
            this.to = to;
            this.gate = gate;
        }

        // getters and setters


        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getFrom() {
            return from;
        }

        public void setFrom(String from) {
            this.from = from;
        }

        public String getTo() {
            return to;
        }

        public void setTo(String to) {
            this.to = to;
        }

        public String getGate() {
            return gate;
        }

        public void setGate(String gate) {
            this.gate = gate;
        }
    }
  learner_created: true
- name: src/cinema/CinemaRoomController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.*;
    import java.util.stream.Collectors;

    @RestController
    public class CinemaRoomController {
        private final List<CinemaSeat> list = new ArrayList<>();

        public CinemaRoomController() {
            cinemaSeatList();
        }

        private void cinemaSeatList() {
            for (int i = 1; i < 10; i++) {
                for (int j = 1; j < 10; j++) {
                    var cinema = new CinemaSeat(i, j);
                    cinema.purchased = false;
                    cinema.token = UUID.randomUUID().toString();
                    list.add(cinema);
                }
            }
        }

        @GetMapping("/seats")
        public CinemaRoom getCinemaRoom() {
            List<CinemaSeat> currentList = list.stream()
                    .filter(it -> !it.purchased)
                    .collect(Collectors.toList());
            return new CinemaRoom(9, 9, currentList);
        }


        @PostMapping("/purchase")
        public ResponseEntity<Object> purchase(@RequestBody CinemaSeat seat) {

            if (seat.getRow() > 9 || seat.getColumn() > 9 ||
                    seat.getRow() < 1 || seat.getColumn() < 1) {
                return new ResponseEntity<> (
                        Map.of("error", "The number of a row or a column is out of bounds!"),
                        HttpStatus.BAD_REQUEST);
            }

            for (CinemaSeat cinemaSeat : list) {
               if (cinemaSeat.getRow() == seat.getRow()
                        && cinemaSeat.getColumn() == seat.getColumn()) {
                   if (!cinemaSeat.purchased) {
                       cinemaSeat.purchased = true;
                       var ticket = Map.of("token", cinemaSeat.token, "ticket", cinemaSeat);
                       return new ResponseEntity<>(ticket, HttpStatus.OK);
                   }
                }
            }
            return new ResponseEntity<> (
                    Map.of("error", "The ticket has been already purchased!"),
                    HttpStatus.BAD_REQUEST);
        }

        @PostMapping("/return")
        public ResponseEntity<Object> returned(@RequestBody TreeMap<String, String> token) {
            var _token = token.firstEntry().getValue();
            for (CinemaSeat seat : list) {
                if (Objects.equals(seat.token, _token)) {
                    seat.purchased = false;
                    var returnedTicket = Map.of("returned_ticket", seat);
                    seat.token = UUID.randomUUID().toString();
                    return new ResponseEntity<>(returnedTicket, HttpStatus.OK);
                }
            }

            return new ResponseEntity<>(
                    Map.of("error", "Wrong token!"),
                    HttpStatus.BAD_REQUEST);
        }

        @PostMapping("/stats")
        public ResponseEntity<Object> stats(@RequestParam String password) {
            var pass = Objects.equals(password, "super_secret");
        }
    }
  learner_created: true
- name: src/cinema/CinemaRoom.java
  visible: true
  text: |
    package cinema;

    import java.util.List;

    public class CinemaRoom {
        private int total_rows;
        private int total_columns;
        private List<CinemaSeat> available_seats;

        public CinemaRoom(int total_rows, int total_columns, List<CinemaSeat> available_seats) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats =available_seats;
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<CinemaSeat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<CinemaSeat> available_seats) {
            this.available_seats = available_seats;
        }
    }
  learner_created: true
- name: src/cinema/UserInfoController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.web.bind.annotation.*;

    import java.util.List;
    import java.util.concurrent.ConcurrentHashMap;


    @RestController
    public class UserInfoController {


        @PostMapping("/user")
        public String userStatus(@RequestBody UserInfo user) {
            if (user.isEnabled()) {
                return String.format("Hello! %s. Your account is enabled.", user.getName());
            } else {
                return String.format("Hello! Nice to see you, %s! Your account is disabled",
                        user.getName());
            }
        }



        @PostMapping("/users")
        public String userStatus(@RequestBody List<UserInfo> userList) {
            return String.format("Added %d users", userList.size());
        }




        private final ConcurrentHashMap<String, String> addressList = new ConcurrentHashMap<>();

        @GetMapping("/address")
        public ConcurrentHashMap<String, String> getAddress() {
            return addressList;
        }

        @PostMapping("/address")
        public void postAddress(@RequestParam String name, @RequestParam String address) {
            addressList.put(name, address);
        }

        @DeleteMapping("/address")
        public void deleteAddress(@RequestParam String name) {
            addressList.remove(name);
        }
    }
  learner_created: true
- name: src/cinema/CinemaSeat.java
  visible: true
  text: |
    package cinema;

    import java.util.UUID;

    public class CinemaSeat {
        private int row;
        private int column;
        private int price;
        boolean purchased;
        String token;

        public CinemaSeat() {}

        public CinemaSeat(int row, int column) {
            this.row = row;
            this.column = column;
            this.price = row <= 4? 10 : 8;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/UserInfo.java
  visible: true
  text: |
    package cinema;

    public class UserInfo {
        private int id;
        private String name;
        private String phone;
        private boolean enabled;

        public UserInfo() {}

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getPhone() {
            return phone;
        }

        public void setPhone(String phone) {
            this.phone = phone;
        }

        public boolean isEnabled() {
            return enabled;
        }

        public void setEnabled(boolean enabled) {
            this.enabled = enabled;
        }
    }
  learner_created: true
- name: src/cinema/FlightController.java
  visible: true
  text: |-
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;

    @RestController
    public class FlightController {

        private final List<FlightInfo> flightInfoList = new ArrayList<>();

        public FlightController() {
            flightInfoList.add(
                    new FlightInfo(1, "Delhi Indira Gandhi", "Stuttgart", "D80"));
            flightInfoList.add(
                    new FlightInfo(2, "Tokyo Haneda", "Frankfurt", "110"));
            flightInfoList.add(
                    new FlightInfo(3, "Berlin Schönefeld", "Tenerife", "15"));
            flightInfoList.add(
                    new FlightInfo(4, "Kilimanjaro Arusha", "Boston", "15"));
        }

        @GetMapping("flights/{id}")
        public FlightInfo getFlightInfo(@PathVariable int id) {
            for (FlightInfo flightInfo : flightInfoList) {
                if (flightInfo.getId() == id) {
                    if (Objects.equals(flightInfo.getFrom(), "Berlin Schönefeld")) {
    //                  " server.error.include-message=always " to enable message in spring
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                                "Berlin Schönefeld is closed for service today");

                    } else {
                        return flightInfo;
                    }
                }
            }

            throw new FlightNotFoundException("Flight not found for id:");
        }

    }
  learner_created: true
- name: hs_err_pid13904.log
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 30 Sep 2022 15:08:23 UTC
record: -1
